import { StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ActionRowBuilder } from 'discord.js';
import { getExecuter } from '../commands/anime.js';

async function fightExpansion(interaction) {
    const interactionId = interaction.customId.split('-').pop();
    const commandExecuters = getExecuter();
    const executerUser = commandExecuters[interactionId];

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId(`fight-options-${interactionId}`)
        .setPlaceholder('Escolha seu pr√≥ximo ataque')
        .addOptions([
            new StringSelectMenuOptionBuilder()
                .setLabel('Ataques Amaldi√ßoados')
                .setValue('ataques_amaldi√ßoados')
                .setEmoji('‚ù§Ô∏è‚Äçüî•'),
            new StringSelectMenuOptionBuilder()
                .setLabel('Esmagamento')
                .setValue('esmagamento')
                .setEmoji('üï≥Ô∏è'),
            new StringSelectMenuOptionBuilder()
                .setLabel('Soco Divergente')
                .setValue('soco_divergente')
                .setEmoji('ü§ú'),
            new StringSelectMenuOptionBuilder()
                .setLabel('Contra-ataque')
                .setValue('contra_ataque')
                .setEmoji('üõ°Ô∏è'),
        ]);

    const actionRow = new ActionRowBuilder().addComponents(selectMenu);

    if (executerUser) {
        if (executerUser.id === interaction.user.id) {
            await interaction.reply({ content: `ü§® **|** O que voc√™ PENSA que est√° fazendo? Voc√™ n√£o pode lutar com voc√™ mesmo!`});
            return;
        } else {
            await interaction.reply({ content: `ü•ä **|** Eita! <@${interaction.user.id}> chamou <@${executerUser.id}> para lutar!`, components: [actionRow]});
        }
    } else {
        await interaction.reply({ content: "‚ùå **|** N√£o consegui encontrar o usu√°rio que iniciou a expans√£o!", ephemeral: true});
    }
}

export { fightExpansion };